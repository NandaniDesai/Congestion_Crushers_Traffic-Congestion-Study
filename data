import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = "traffic_data_large.csv"  # Replace with the correct path if needed
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
print("Dataset Preview:")
print(data.head())

# Convert timestamp column to datetime
data['timestamp'] = pd.to_datetime(data['timestamp'])

# Extract additional time-based features
data['hour'] = data['timestamp'].dt.hour
data['date'] = data['timestamp'].dt.date

# --- Data Analysis ---

# Traffic Volume by Location
location_traffic = data.groupby('location')['traffic_volume'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(data=location_traffic, x='location', y='traffic_volume', palette='viridis')
plt.title('Average Traffic Volume by Location (Hotspots)')
plt.xlabel('Location')
plt.ylabel('Average Traffic Volume')
plt.ylim(500, location_traffic['traffic_volume'].max() + 50)  # Adjust y-axis scale for better visibility
plt.xticks(rotation=45)
plt.show()

# 1. Analyze Traffic Volume by Hour
hourly_traffic = data.groupby('hour')['traffic_volume'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.lineplot(data=hourly_traffic, x='hour', y='traffic_volume', marker='o')
plt.title('Average Traffic Volume by Hour')
plt.xlabel('Hour of the Day')
plt.ylabel('Average Traffic Volume')
plt.ylim(500, hourly_traffic['traffic_volume'].max() + 50)  # Adjust y-axis scale
plt.grid(True)
plt.show()

# 2. Traffic Volume by Day of the Week
weekday_traffic = data.groupby('day_of_week')['traffic_volume'].mean().reindex([
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
plt.figure(figsize=(10, 6))
sns.barplot(x=weekday_traffic.index, y=weekday_traffic.values)
plt.title('Average Traffic Volume by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Average Traffic Volume')
plt.ylim(500, weekday_traffic.max() + 50)  # Adjust y-axis scale
plt.xticks(rotation=45)
plt.show()

# 3. Weather Impact on Traffic Volume
weather_traffic = data.groupby('weather')['traffic_volume'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(data=weather_traffic, x='weather', y='traffic_volume', palette='coolwarm')
plt.title('Traffic Volume by Weather Conditions')
plt.xlabel('Weather')
plt.ylabel('Average Traffic Volume')
plt.ylim(500, weather_traffic['traffic_volume'].max() + 50)  # Adjust y-axis scale
plt.show()

# 4. Correlation Heatmap
numeric_data = data[['traffic_volume', 'temperature', 'accidents', 'avg_speed', 'max_speed', 'min_speed']]
correlation_matrix = numeric_data.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

# 5. Holiday vs. Non-Holiday Traffic
holiday_traffic = data.groupby('is_holiday')['traffic_volume'].mean().reset_index()
plt.figure(figsize=(8, 5))
sns.barplot(data=holiday_traffic, x='is_holiday', y='traffic_volume', palette='Set2')
plt.title('Average Traffic Volume on Holidays vs. Non-Holidays')
plt.xlabel('Is Holiday')
plt.ylabel('Average Traffic Volume')
plt.ylim(500, holiday_traffic['traffic_volume'].max() + 50)  # Adjust y-axis scale
plt.show()

# --- Insights ---
print("\nKey Insights:")
print("- Peak traffic hours: Early mornings and late evenings.")
print("- Higher traffic observed on weekdays compared to weekends.")
print("- Weather conditions such as rain and fog significantly impact traffic.")
print("- Traffic is slightly higher on non-holidays compared to holidays.")

# Save processed data if needed
processed_file_path = "processed_traffic_data.csv"
data.to_csv(processed_file_path, index=False)
print(f"Processed dataset saved as '{processed_file_path}'.")
